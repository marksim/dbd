010_time_class

As a client
I can add facts to a fact stream and the time_stamp is set

* change valid? to errors
  * returns array of error messages (errors.empty? indicates valid?)

* add a performance bench mark to the test set (this will also
  act as a collision test for the randomization approaches).

* use a TimeStamp class

* the to_s of this class shows the time_stamp to ns precision

* the time_stamp class adds some random offset time
  (e.g. between 100 and 99 ns) to a new time_stamp

* add a store method on Graph
  * that will store a (Provenance)Resource instance
  * this will now set the time_stamps (enforcing the strictly monotic order)

* change the methods << that change values to add!()

* allow setting the subject and provenance_subject of a fact with set_once
  (a soft form of immutable behavior that does not require the creation of
   new objects (garbage collection cost) and may clean up the way too complex
   check_or_set_subject_and_provenance behavior in Resource)
